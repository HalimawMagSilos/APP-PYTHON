version: "3.9"

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpwd}
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s # Added to give MySQL time to start up before checking
    restart: unless-stopped # Added for robustness

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq1
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s # Added for robustness
    restart: unless-stopped # Added for robustness

  afrs-microservice:
    build:
      context: ./afrs-microservice
      dockerfile: Dockerfile
    container_name: afrs
    env_file: ./afrs-microservice/.env
    environment:
      TRANSFORMERS_CACHE: /tmp/hf-cache
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./models:/models
      - ./data:/data
      - ./hf-cache:/tmp/hf-cache
      - ./faiss_data:/data/faiss
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: on-failure # Added for robustness


  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    depends_on:
      afrs-microservice:
        condition: service_healthy # Changed to ensure dependencies are ready
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - "C:/xampp/htdocs/Microservices - CORE 1/certs/fullchain.pem:/etc/ssl/certs/fullchain.pem:ro"
      - "C:/xampp/htdocs/Microservices - CORE 1/certs/privkey.pem:/etc/ssl/private/privkey.pem:ro"
    ports:
      - "80:80"
      - "443:443"

volumes:
  db_data: